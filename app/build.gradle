plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.appdistribution'
}
apply from: "${rootProject.projectDir}/gradle/base-android-config.gradle"
apply from: "${rootProject.projectDir}/gradle/compose-android-config.gradle"


android {
    ext.majorVersion = project.property('app.version.major') as Integer
    ext.minorVersion = project.property('app.version.minor') as Integer
    ext.fixVersion = project.property('app.version.fix') as Integer

    defaultConfig {
        applicationId "rip.zarmy.smsbroadcaster"

        versionCode majorVersion * 1_000_000_000 + minorVersion * 1_000_000 + fixVersion
        versionName "$majorVersion.$minorVersion.$fixVersion"

        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "String", "API_URL", "\"https://selin.in.ua/\""
        buildConfigField "boolean", "LOGGER_ENABLED", "true"

        firebaseAppDistribution {
            artifactType = "APK"
            serviceCredentialsFile = "google-service-key.json"
        }
    }

    // Load keystore properties if file exists
    def keystore_properties = file('../signing/release.properties')
    if (keystore_properties.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(keystore_properties))
        props.each { prop ->
            project.ext.set(prop.key, prop.value)
        }
    }
    // Read passwords from Gradle properties and if not found, then from environment variables
    def keystore_file = project.hasProperty('KEYSTORE_FILE') ? KEYSTORE_FILE : System.getenv("KEYSTORE_FILE")
    def keystore_password = project.hasProperty('KEYSTORE_PASSWORD') ? KEYSTORE_PASSWORD : System.getenv("KEYSTORE_PASSWORD")
    def key_alias = project.hasProperty('KEY_ALIAS') ? KEY_ALIAS : System.getenv("KEY_ALIAS")
    def key_password = project.hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : System.getenv("KEY_PASSWORD")
    signingConfigs {
        release {
            storeFile rootProject.file(keystore_file)
            storePassword keystore_password
            keyAlias key_alias
            keyPassword key_password
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".development"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            FirebasePerformance {
                instrumentationEnabled false
            }
            firebaseAppDistribution {
                groups = "dev-team, qa-team"
            }
            manifestPlaceholders = [crashlyticsCollectionEnabled: "false"]
        }
        release {
            if (keystore_password && key_alias && key_password) {
                signingConfig signingConfigs.release
            } else {
                logger.error("You need to define KEYSTORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD to enable release signing.")
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseAppDistribution {
                groups = "dev-team, qa-team, users-team"
            }
            buildConfigField "boolean", "LOGGER_ENABLED", "false"
            manifestPlaceholders = [crashlyticsCollectionEnabled: "true"]
        }
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // region AndroidX
    implementation libs.androidx.appcompat
    implementation libs.androidx.core
    implementation libs.androidx.fragment
    implementation libs.bundles.androidx.lifecycle
    implementation libs.bundles.androidx.compose
    implementation libs.androidx.work.ktx
    // endregion

    // region Kotlin
    implementation libs.kotlin.coroutines.core
    implementation libs.kotlin.coroutines.android
    implementation libs.kotlin.reflect
    // endregion

    // region di
    implementation libs.bundles.koin
    // endregion

    // region security
    implementation libs.bundles.androidx.security
    implementation libs.permissions.warder
    // endregion

    // region presentation
    implementation libs.orbit.viewmodel
    testImplementation libs.orbit.test
    // endregion

    // region UI
    implementation libs.google.material
    implementation libs.androidx.splashscreen
    // endregion

    // region IO
    implementation platform(libs.okhttp.platform)
    implementation libs.okhttp.client
    implementation libs.okhttp.logging
    implementation libs.retrofit.core
    implementation libs.retrofit.converter.moshi
    implementation libs.moshi.kotlin
    implementation libs.moshi.adapters
    implementation libs.androidx.datastore
    // endregion

    // region Services
    implementation platform(libs.firebase.platform)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    implementation libs.firebase.perf
    // endregion

    // region Tools
    implementation libs.timber
    debugImplementation libs.leakcanary
    // endregion

    // region Tests
    testImplementation libs.bundles.tests.unit
    testImplementation libs.bundles.tests.viewmodel
    androidTestImplementation libs.bundles.tests.android
    // endregion
}
